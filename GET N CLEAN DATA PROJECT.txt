Getting and Cleaning Data - Project

The purpose of this project is to demonstrate your ability to collect, work with, and clean a data set. The goal is to prepare tidy data that can be used for later analysis. You will be graded by your peers on a series of yes/no questions related to the project. You will be required to submit: 1) a tidy data set as described below, 2) a link to a Github repository with your script for performing the analysis, and 3) a code book that describes the variables, the data, and any transformations or work that you performed to clean up the data called CodeBook.md. You should also include a README.md in the repo with your scripts. This repo explains how all of the scripts work and how they are connected. 

One of the most exciting areas in all of data science right now is wearable computing - see for example this article . Companies like Fitbit, Nike, and Jawbone Up are racing to develop the most advanced algorithms to attract new users. The data linked to from the course website represent data collected from the accelerometers from the Samsung Galaxy S smartphone. A full description is available at the site where the data was obtained:

http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones

Here are the data for the project:

https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip

 You should create one R script called run_analysis.R that does the following. 

    Merges the training and the test sets to create one data set.
    Extracts only the measurements on the mean and standard deviation for each measurement. 
    Uses descriptive Activity names to name the activities in the data set
    Appropriately labels the data set with descriptive variable names. 

    From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each Activity and each Subject.
---
library(dplyr)
library(data.table)

##  Read training data
TrainSubject  = read.table("UCI HAR Dataset/train/Subject_train.txt", header = FALSE)
TrainActivity = read.table("UCI HAR Dataset/train/y_train.txt", header = FALSE)
TrainFeature  = read.table("UCI HAR Dataset/train/X_train.txt", header = FALSE)

##  Read test data
TestSubject  = read.table("UCI HAR Dataset/test/Subject_test.txt", header = FALSE)
TestActivity = read.table("UCI HAR Dataset/test/y_test.txt", header = FALSE)
TestFeature  = read.table("UCI HAR Dataset/test/X_test.txt", header = FALSE)

##  1 - Merging train and Test data
Subject  = rbind(TrainSubject,  TestSubject)
Activity = rbind(TrainActivity, TestActivity)
Feature  = rbind(TrainFeature,  TestFeature)

FeatureNames       = read.table("UCI HAR Dataset/features.txt")	## from Supporting Metadata
colnames(Feature)  = t(FeatureNames[2])  ## naming the columns

##  Merging
colnames(Subject)  = "Subject"
colnames(Activity) = "Activity"
MergedData         = cbind(Feature,Activity,Subject)

##  2 - Extracts only the measurements on the mean and standard deviation for each measurement

##  Extract the column indices that have either mean or std in them.
MeanStdCols     = grep(".*Mean.*|.*Std.*", names(MergedData), ignore.case=TRUE)

##  Add Activity and Subject columns to the list and look at the dimension of MergedData
requiredColumns = c(MeanStdCols, 562, 563)
dim(MergedData)

ExtractedData   = MergedData[,requiredColumns]
dim(ExtractedData)

##  3 - Uses descriptive Activity names to name the activities in the data set

## change Activity field type in ExtractedData from numeric to character to accept Activity names from metadata ActivityLabels

ActivityLabels = read.table("UCI HAR Dataset/activity_labels.txt", header = FALSE)	##Supporting Metadata
ExtractedData$Activity = as.character(ExtractedData$Activity)
for (i in 1:6){
ExtractedData$Activity[ExtractedData$Activity == i] = as.character(ActivityLabels[i,2])
}

## factor the Activity variable in
ExtractedData$Activity = as.factor(ExtractedData$Activity)

##  4 - Appropriately labels the data set with descriptive variable names
names(ExtractedData)=gsub("Acc", "Accelerometer", names(ExtractedData))
names(ExtractedData)=gsub("Gyro", "Gyroscope", names(ExtractedData))
names(ExtractedData)=gsub("BodyBody", "Body", names(ExtractedData))
names(ExtractedData)=gsub("Mag", "Magnitude", names(ExtractedData))
names(ExtractedData)=gsub("^t", "Time", names(ExtractedData))
names(ExtractedData)=gsub("^f", "Frequency", names(ExtractedData))
names(ExtractedData)=gsub("tBody", "TimeBody", names(ExtractedData))
names(ExtractedData)=gsub("-mean()", "Mean", names(ExtractedData), ignore.case = TRUE)
names(ExtractedData)=gsub("-std()", "STD", names(ExtractedData), ignore.case = TRUE)
names(ExtractedData)=gsub("-freq()", "Frequency", names(ExtractedData), ignore.case = TRUE)

names(ExtractedData)

##  5 - From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each Activity and each Subject

## set Subject as a factor variable.
ExtractedData$Subject = as.factor(ExtractedData$Subject)
ExtractedData         = data.table(ExtractedData)

##  create TidyData as a data set with average for each Activity and Subject. 
TidyData = aggregate(. ~Subject + Activity, ExtractedData, mean)

##  order the entries in TidyData 
TidyData = TidyData[order(TidyData$Subject,TidyData$Activity),]

##  write data file
write.table(TidyData, file = "TidyDataSet.txt", row.names = FALSE)




